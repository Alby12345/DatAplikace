--This database scripts resembles simplified version of banking system
--The main simplification is in amount of informations stored
--and thought complexity difference
--Basic entities are as follows:
--  Customer
--  Account
--  Transaction
--  Card
--Every customer can have unlimited amount of Acconts
--Each account has exactly one owner
--Account can have max 3 cards
--And each card must have exactly one owner account
-- TODO: thing throug transactions
--       Problem is outside operations
--               is dual ownership within bank operation
--       Solve it by giving the Transaction one owner, the one who
--       issued the transaction? Bank can be a CustomerLike entity?


--TODO: INDEXY, Zacit Trigry

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
                  -- Tables and theirs indexes definitions --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
                             -- Customer --
--------------------------------------------------------------------------------
-- Table customer, evides all of banks customers
-- Id generated with insert trigger
create table Customer(
  IdCust number(7) not null,
  FirstName varchar2(50) not null,
  LastName varchar2(50) not null,
  BirthDate date not null,
  City varchar2(50),
  Street varchar2(50),
  StreetNumber number(5),
  Email varchar2(100) not null,
  Phone char(13) not null,
  --
  constraint Customer_PK
    primary key (IdCust),
  constraint Customer_U_Email
    unique (Email),
  constraint Customer_U_Phone
    unique (Phone),
  constraint Customer_CHK_Email
    check (REGEXP_LIKE(Email, '[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}')),
  constraint Customer_CHK_Phone
    check (REGEXP_LIKE(Phone, '\+420[1-9][0-9]{8}'))  
);
  

-- Unique explicit index trough Email
--create index Customer_Email_INX
--  on Customer(Email);


--------------------------------------------------------------------------------
                             -- Account --
--------------------------------------------------------------------------------
-- Table account, which stores all accounts
-- which are availible to theirs custommers
-- Id generated with insert trigger
-- AccNumber generated by trigger
create table Account(
  IdAcc number(8) not null,
  Name varchar2(25),
  AccNumber number(10) not null,
  Balance number(18,3) default 0,
  Currency char(3) not null,
  Created date not null,
  --
  constraint Account_PK
    primary key (IdAcc),
  constraint Account_U_AccNumber
    unique (AccNumber),
  constraint Account_CHK_Balance
    check ( Balance >= 0 ),
  constraint Account_CHK_Currency
    check ( Currency in ('CZK', 'EUR', 'USD'))
);

-- Unique explicit index trough Email
--create index Account_AccNumber_INX
--  on Account(AccNumber);

--------------------------------------------------------------------------------
                               -- Card --
--------------------------------------------------------------------------------
-- Table card, which stores all emmited cards to customers
-- Id generated with insert trigger
-- NumberC, CVV generated randolmy by trigger
-- Expiration generated bo trigger two years from sysdate
create table Card(
  IdCard number(10) not null,
  IdAcc number(7) not null,
  NumberC number(16) not null,
  Expiration char(5) not null,
  CVV number(3) not null,
  Canceled number(1) default 0,
  --
  constraint Card_PK
    primary key(IdCard),
  constraint Card_FK_Account
    foreign key (IdAcc)
    references Account(IdAcc)
    on delete cascade,
  constraint Card_U_Number
    unique (NumberC),
  constraint Card_CHK_CanceledB
    check ( Canceled >=0 AND Canceled <=1 )
);

--------------------------------------------------------------------------------
-- Transition Table for 1:N relation ship between Account and its Cards
--create table AccsCards(
-- IdAcc number(7) not null,
--  IdCard number(10) not null,
--  --
--  constraint AccsCards_PK
--    primary key(IdAcc, IdCard),
--  constraint AccsCards_U_IdCard
--    unique(IdCard),
--  constraint AccsCards_FK_Account
--    foreign key(IdAcc)
--    references Account(IdAcc)
--    on delete cascade,
--  constraint AccsCards_FK_Card
--    foreign key(IdCard)
--    references Card(IdCard)
--    on delete cascade
--);

-- Index on AccsCard foreign key
--create index AccsCards_IdAcc_INX
--  on AccsCards(IdAcc);
--create index AccsCards_IdCard_INX
--  on AccsCards(IdCard);

--------------------------------------------------------------------------------
                             -- CustAccs --
--------------------------------------------------------------------------------
-- Transition table for M:N relation ship between User ant its Accounts
-- Id generated with insert trigger
-- max 10 accounts for person
create table CustAccs(
  IdCust number(7) not null,
  IdAcc number(8) not null,
  AccPriv char(4) default('FULL'),
  --
  constraint CustAccs_PK 
    primary key(IdCust, IdAcc),
  constraint CustAccs_FK_Customer
    foreign key (IdCust)
    references Customer(IdCust)
    on delete cascade,
  constraint CustAccs_FK_Account
    foreign key (IdAcc)
    references Account(IdAcc)
    on delete cascade,
  constraint CustAccs_CHK_AccPriv
    check ( AccPriv in ('FULL', 'WIEW'))
);

-- Index on CustAccs foreign key
create index CustAccs_IdCustomer_INX
  on CustAccs(IdAcc);
--create index CustAccs_IdAccount_INX
--  on CustAccs(IdAccount);

--------------------------------------------------------------------------------
                           -- Transaction --
--------------------------------------------------------------------------------
-- Table storing all transactions which were issued
-- Id generated with insert trigger
create table Transaction(
  IdTrans number(15) not null,
  Amount number(15) not null,
  Currency char(3) not null,
  AccTo number(10) not null,
  BankTo number(4),
  AccFrom number(10) not null,
  BankFrom number(4),
  VarSymb number(20),
  ConSymb number(20),
  Created date not null,
  Message varchar2(200),
  --
  constraint Transaction_PK
    primary key(IdTrans),
  constraint Transaction_CHK_Amount
    check ( Amount > 0 ),
  constraint Transaction_CHK_BankTo
    check ( BankTo > 0 ),
  constraint Transaction_CHK_BankFrom
    check ( BankFrom > 0 ),
  constraint Transaction_CHK_AccTo
    check ( AccTo > 0 ),
  constraint Transaction_CHK_AccFrom
    check ( AccFrom > 0 ),
  constraint Transaction_CHK_Currency
    check ( Currency in ('CZK', 'EUR', 'USD'))
);

-- Index on Transaction table not unique
create index Transaction_AccTo_INX
  on Transaction(AccTo);
create index Transaction_AccFrom_INX
  on Transaction(AccFrom);


--------------------------------------------------------------------------------
                           -- Agreement --
--------------------------------------------------------------------------------
-- Table stroring Aggreements to Customers
-- Id generated with insert trigger
create table Agreement(
  IdAgre number(15) not null,
  IdCust number(7) not null,
  Name varchar2(50) not null,
  Created date not null,
  FileId number(20) not null,
  --
  constraint Agreement_PK
    primary key(IdAgre),
  constraint Agreement_FK_Customer
    foreign key(IdCust)
    references Customer(IdCust),
  constraint Agreement_U_FileId
    unique(FileId)
);

-- Index for Agreement table
create index Agreement_IdCust_INX
  on Agreement(IdCust);
--create index Agreement_FileId_INX
--  on Agreement(FileId);


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
                        -- End Tables & indexes --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
                      --SEQUENTIONS for Id Creations--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

create sequence SEQ_Customer_Id
  minvalue 1
  maxvalue 9999999
  nocycle
;

create sequence SEQ_Card_Id
  minvalue 1
  maxvalue 9999999999
  nocycle
;

create sequence SEQ_Account_Id
  minvalue 1
  maxvalue 99999999
  nocycle
;

create sequence SEQ_Transaction_Id
  minvalue 1
  maxvalue 999999999999999
  nocycle
;

create sequence SEQ_Agreement_Id
  minvalue 1
  maxvalue 999999999999999
  nocycle
;

--------------------------------------------------------------------------------
                            -- Statistics --
--------------------------------------------------------------------------------

analyze table CUSTOMER compute statistics;
analyze table ACCOUNT compute statistics;
analyze table TRANSACTION compute statistics;
analyze table AGREEMENT compute statistics;
analyze table CustAccs compute statistics;
analyze table CARD compute statistics;



--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
              -- Deletion of tables and all surounding structures --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--select 'drop sequence ' || sequence_name || ';' from user_sequences;
drop sequence SEQ_Customer_Id;
drop sequence SEQ_Card_Id;
drop sequence SEQ_Account_Id;
drop sequence SEQ_Transaction_Id;
drop sequence SEQ_Agreement_Id;


--select 'drop trigger ' || trigger_name || ';' from user_triggers;
drop trigger BEF_INS_TRANSACTION;
drop trigger BEF_DEL_CUSTOMER;
drop trigger BEF_INS_TRANS;
drop trigger BEF_INS_AGRE_ID;
drop trigger BEF_INS_ACC_ID;
drop trigger BEF_INS_CARD_ID;
drop trigger BEF_INS_CUST_ID;
drop trigger BEF_INS_CARD_CVV;
drop trigger BEF_INS_ACCOUNT_DATECREATED;
drop trigger BEF_DEL_ACC;
drop trigger BEF_INS_CARD_EXPIRATION;
drop trigger BEF_INS_TRANS_ID;
drop trigger BEF_INS_CARD_NUMBERC;
drop trigger BEF_INS_ACCOUNT_ACCNUMBER;

--select 'drop view ' || view_name || ';' from user_views;
drop view VIEW_CUSTACCS;
drop view VIEW_CUSTACCSFULL;
drop view VIEW_CUSTWITHMOREACCS;

--select 'analyze table ' || table_name || ' delete statistics' || ';' from user_tables;
analyze table CUSTOMER delete statistics;
analyze table ACCOUNT delete statistics;
analyze table TRANSACTION delete statistics;
analyze table AGREEMENT delete statistics;
analyze table CustAccs delete statistics;
analyze table CARD delete statistics;

drop table Agreement;
drop table Transaction;
drop table CustAccs;
--drop table AccsCards;
drop table Card;
drop table Customer;
drop table Account;